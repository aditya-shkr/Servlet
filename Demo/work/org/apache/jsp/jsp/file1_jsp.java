/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.5
 * Generated at: 2017-10-05 09:47:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class file1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("body ng-app = \"myApp\">\n");
      out.write("\t\n");
      out.write("      <div ng-controller = \"myCtrl\">\n");
      out.write("         <input type = \"file\" file-model = \"myFile\"/>\n");
      out.write("         <button ng-click = \"uploadFile()\">upload me</button>\n");
      out.write("      </div>\n");
      out.write("      \n");
      out.write("      <script>\n");
      out.write("         var myApp = angular.module('myApp', []);\n");
      out.write("         \n");
      out.write("         myApp.directive('fileModel', ['$parse', function ($parse) {\n");
      out.write("            return {\n");
      out.write("               restrict: 'A',\n");
      out.write("               link: function(scope, element, attrs) {\n");
      out.write("                  var model = $parse(attrs.fileModel);\n");
      out.write("                  var modelSetter = model.assign;\n");
      out.write("                  \n");
      out.write("                  element.bind('change', function(){\n");
      out.write("                     scope.$apply(function(){\n");
      out.write("                        modelSetter(scope, element[0].files[0]);\n");
      out.write("                     });\n");
      out.write("                  });\n");
      out.write("               }\n");
      out.write("            };\n");
      out.write("         }]);\n");
      out.write("      \n");
      out.write("         myApp.service('fileUpload', ['$https:', function ($https:) {\n");
      out.write("            this.uploadFileToUrl = function(file, uploadUrl){\n");
      out.write("               var fd = new FormData();\n");
      out.write("               fd.append('file', file);\n");
      out.write("            \n");
      out.write("               $https:.post(uploadUrl, fd, {\n");
      out.write("                  transformRequest: angular.identity,\n");
      out.write("                  headers: {'Content-Type': undefined}\n");
      out.write("               })\n");
      out.write("            \n");
      out.write("               .success(function(){\n");
      out.write("               })\n");
      out.write("            \n");
      out.write("               .error(function(){\n");
      out.write("               });\n");
      out.write("            }\n");
      out.write("         }]);\n");
      out.write("      \n");
      out.write("         myApp.controller('myCtrl', ['$scope', 'fileUpload', function($scope, fileUpload){\n");
      out.write("            $scope.uploadFile = function(){\n");
      out.write("               var file = $scope.myFile;\n");
      out.write("               \n");
      out.write("               console.log('file is ' );\n");
      out.write("               console.dir(file);\n");
      out.write("               \n");
      out.write("               var uploadUrl = \"/fileUpload\";\n");
      out.write("               fileUpload.uploadFileToUrl(file, uploadUrl);\n");
      out.write("            };\n");
      out.write("         }]);\n");
      out.write("\t\t\t\n");
      out.write("      </script>\n");
      out.write("      \n");
      out.write("   </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
